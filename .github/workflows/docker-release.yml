name: 🐳 Build and Release SAM Docker

on:
  push:
    tags:
      - 'v*'
      - 'docker-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag for the release'
        required: true
        default: 'latest'
      create_release:
        description: 'Create GitHub release'
        type: boolean
        default: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 📋 Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 🐳 Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          BUILD_DATE=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          GIT_COMMIT=${{ github.sha }}
          VERSION=${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 📦 Create release artifacts
      run: |
        # Make build script executable
        chmod +x docker/build_release.sh
        
        # Create release artifacts
        VERSION="${{ github.ref_name }}"
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        # Create release directory
        mkdir -p release/sam-docker-${VERSION}
        
        # Copy essential files
        cp docker-compose.yml release/sam-docker-${VERSION}/
        cp docker/manage_sam.sh release/sam-docker-${VERSION}/
        cp docker/sam_docker_config.json release/sam-docker-${VERSION}/
        cp DOCKER_DEPLOYMENT_GUIDE.md release/sam-docker-${VERSION}/
        cp LICENSE release/sam-docker-${VERSION}/
        
        # Create simplified docker-compose for release
        cat > release/sam-docker-${VERSION}/docker-compose.yml << 'EOF'
        version: '3.8'
        
        services:
          sam-app:
            image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION}
            container_name: sam-main
            restart: unless-stopped
            ports:
              - "8502:8502"
              - "8501:8501"
              - "8503:8503"
            volumes:
              - sam_data:/app/data
              - sam_memory:/app/memory_store
              - sam_logs:/app/logs
              - sam_chroma:/app/chroma_db
              - sam_uploads:/app/uploads
              - sam_cache:/app/cache
              - sam_backups:/app/backups
              - sam_security:/app/security
            environment:
              - SAM_DOCKER=true
              - SAM_ENVIRONMENT=production
              - REDIS_URL=redis://redis:6379/0
              - CHROMA_HOST=chroma
              - CHROMA_PORT=8000
            depends_on:
              - redis
              - chroma
            networks:
              - sam-network
            healthcheck:
              test: ["CMD", "curl", "-f", "http://localhost:8502/health"]
              interval: 30s
              timeout: 10s
              retries: 3
              start_period: 60s
        
          redis:
            image: redis:7-alpine
            container_name: sam-redis
            restart: unless-stopped
            volumes:
              - sam_redis:/data
            command: redis-server --appendonly yes --maxmemory 256mb
            networks:
              - sam-network
        
          chroma:
            image: chromadb/chroma:latest
            container_name: sam-chroma
            restart: unless-stopped
            volumes:
              - sam_chroma_data:/chroma/chroma
            environment:
              - CHROMA_SERVER_HOST=0.0.0.0
              - CHROMA_SERVER_HTTP_PORT=8000
            networks:
              - sam-network
        
        volumes:
          sam_data:
          sam_memory:
          sam_logs:
          sam_chroma:
          sam_chroma_data:
          sam_uploads:
          sam_cache:
          sam_backups:
          sam_security:
          sam_redis:
        
        networks:
          sam-network:
            driver: bridge
        EOF
        
        # Create quick start script
        cat > release/sam-docker-${VERSION}/quick_start.sh << 'EOF'
        #!/bin/bash
        set -e
        echo "🐳 SAM Docker Quick Start"
        echo "========================="
        
        if ! command -v docker &> /dev/null; then
            echo "❌ Docker not found. Please install Docker first."
            exit 1
        fi
        
        if ! command -v docker-compose &> /dev/null; then
            echo "❌ Docker Compose not found. Please install Docker Compose first."
            exit 1
        fi
        
        echo "📥 Pulling SAM Docker images..."
        docker-compose pull
        
        echo "🚀 Starting SAM services..."
        docker-compose up -d
        
        echo "⏳ Waiting for services..."
        sleep 15
        
        if docker-compose ps | grep -q "Up"; then
            echo "✅ SAM is running!"
            echo ""
            echo "🌟 Access SAM at:"
            echo "   Main Interface: http://localhost:8502"
            echo "   Memory Center:  http://localhost:8501"
            echo "   Setup Page:     http://localhost:8503"
        else
            echo "❌ Failed to start services"
            docker-compose logs
            exit 1
        fi
        EOF
        
        chmod +x release/sam-docker-${VERSION}/quick_start.sh
        chmod +x release/sam-docker-${VERSION}/manage_sam.sh
        
        # Create README
        cat > release/sam-docker-${VERSION}/README.md << EOF
        # SAM Docker Release ${VERSION}
        
        Containerized version of SAM - Secure AI Memory assistant.
        
        ## Quick Start
        
        1. Install Docker and Docker Compose
        2. Run: \`./quick_start.sh\`
        3. Access: http://localhost:8502
        
        ## Documentation
        
        See \`DOCKER_DEPLOYMENT_GUIDE.md\` for complete documentation.
        
        ## Support
        
        - Issues: https://github.com/forge-1825/SAM/issues
        - Documentation: https://github.com/forge-1825/SAM
        EOF
        
        # Create archive
        cd release
        tar -czf sam-docker-${VERSION}.tar.gz sam-docker-${VERSION}/
        cd ..
        
        echo "VERSION=${VERSION}" >> $GITHUB_ENV

    - name: 📝 Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << EOF
        # 🐳 SAM Docker Release ${{ env.VERSION }}
        
        ## Container Distribution
        
        This release provides SAM as a containerized application for easy deployment.
        
        ### 🚀 Quick Start
        
        \`\`\`bash
        # Download and extract
        wget https://github.com/${{ github.repository }}/releases/download/${{ env.VERSION }}/sam-docker-${{ env.VERSION }}.tar.gz
        tar -xzf sam-docker-${{ env.VERSION }}.tar.gz
        cd sam-docker-${{ env.VERSION }}
        
        # Start SAM
        ./quick_start.sh
        
        # Access at http://localhost:8502
        \`\`\`
        
        ### 📦 What's Included
        
        - **Multi-service architecture** with Redis and ChromaDB
        - **Production-ready** configuration with health checks
        - **Persistent data volumes** for data safety
        - **One-command deployment** with quick start script
        - **Multi-architecture support** (AMD64, ARM64)
        
        ### 🏗️ Architecture
        
        - **SAM Main App**: Streamlit application (Port 8502)
        - **Memory Center**: Advanced memory management (Port 8501)
        - **Setup Interface**: First-time setup (Port 8503)
        - **Redis**: Session and cache management
        - **ChromaDB**: Vector database for embeddings
        
        ### 📋 System Requirements
        
        - **OS**: Linux, macOS, Windows (with Docker)
        - **RAM**: 4GB minimum, 8GB+ recommended
        - **Storage**: 10GB+ free space
        - **Docker**: Version 20.10+
        - **Docker Compose**: Version 2.0+
        
        ### 🔧 Management
        
        Use \`manage_sam.sh\` for advanced operations:
        - \`./manage_sam.sh start\` - Start services
        - \`./manage_sam.sh stop\` - Stop services
        - \`./manage_sam.sh logs\` - View logs
        - \`./manage_sam.sh backup\` - Create backup
        - \`./manage_sam.sh status\` - Check status
        
        ### 📚 Documentation
        
        Complete documentation in \`DOCKER_DEPLOYMENT_GUIDE.md\`
        
        ---
        
        **Docker Images**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}\`
        **Architectures**: linux/amd64, linux/arm64
        **Build Date**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        **Git Commit**: ${{ github.sha }}
        EOF

    - name: 🎉 Create GitHub Release
      if: github.event_name == 'push' || github.event.inputs.create_release == 'true'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.VERSION }}
        name: "SAM Docker Release ${{ env.VERSION }}"
        body_path: release_notes.md
        files: |
          release/sam-docker-${{ env.VERSION }}.tar.gz
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: sam-docker-${{ env.VERSION }}
        path: release/sam-docker-${{ env.VERSION }}/
        retention-days: 30
